#include <Wire.h>             // for i2c code

#define VERSION 0x12          // software version (LSB 0..release, 1..devel)

#define SS 10                 // PB2
#define MOSI 11               // PB3
#define MISO 12               // PB4
#define SCK 13                // PB5

boolean got_esc = false;      // got escape character over spi
boolean do_spi_next = false;  // next character to send is in spi_next
boolean i2c_enabled = false;  // called Wire.begin()
byte spi_next;                // next character to send over spi


void setup()
{
  byte clr;
  
  Serial.begin(57600);
  
  // setup SPI interface
  pinMode(SS, INPUT);
  pinMode(MOSI, INPUT);
  pinMode(MISO, OUTPUT);
  pinMode(SCK, INPUT);
  
  // enable SPI interface, CPOL=1, CHPA=1
  SPCR = (1<<6)|(1<<3)|(1<<2);
  // dummy read
  clr = SPSR;
  clr = SPDR;
}


void do_irq()
{
  // raise a Card Line hardware interrupt (PB6)
  DDRB |= (1 << 6);
  PORTB &= ~(1 << 6);    // low
  PORTB |= (1 << 6);     // high
  PORTB &= ~(1 << 6);    // low  
}


byte spi_transfer(volatile byte out)
{
  // send and receive a character, blocking
  SPDR = out;
  while (!(SPSR & (1<<7)));
  return SPDR;
}


void cmd_analog_read()
{
  byte pin;
  unsigned int val;

  pin = spi_transfer(0x00);
  pinMode(pin, INPUT);
  val = analogRead(pin);
  // wake up nds (might not be needed for adc, but a good test)
  do_irq();
  spi_transfer(val>>8);
  spi_transfer(val&0xff);
}


void cmd_analog_read_fast()
{
  // do fast analog/digital conversion
  // code from Bill Dreschel
  // see also http://www.byrote.org/arduino/
  // todo: needs more testing
  byte i, in, pin, val;
  byte state = 0;
  
  // setup adc control and status register
  // 500kHz sampling rate (8MHz/16)
  ADCSRA = (1<<ADEN)|(1<<ADPS2);
  
  // &0x0f is sanity check
  pin = spi_transfer(0x00)&0x0f;
  
  // set adc multiplexer selection register
  // adc data register is left-adjusted
  // AVCC with external capacitor at AREF pin (?)
  ADMUX = (1<<ADLAR)|(1<<REFS0)|pin;
  
  // set timer/counter control register a
  // using fast pwm (?)
  TCCR2A = (1<<COM2A1)|(1<<WGM21)|(1<<WGM20);
  // set timer/counter control register b
  // no prescaling
  TCCR2B = (1<<CS20);
  
  // set timer/counter 0 interrupt mask register
  // disables delay() (?)
  TIMSK0 = 0;
  // set timer/counter 1 interrupt mask register
  TIMSK1 = 0;
  
  // read a few samples to prime the adc
  // start the conversion
  ADCSRA |= (1<<ADSC);
  for (i=0; i<8; i++) {
    // wait until complete
    while (ADCSRA&(1<<ADSC));
    // dummy read
    val = ADCH;
    // start the next conversion
    ADCSRA |= (1<<ADSC);
  }
  
  // loop until we receive \F to stop
  do {
    while (ADCSRA&(1<<ADSC));
    val = ADCH;
    ADCSRA |= (1<<ADSC);
    in = spi_transfer(val);
    // check spi input
    if (state == 0 && in == '\\') {
      state = 1;
    } else if (state == 1 && in == 'F') {
      state = 2;
    } else if (state == 1) {
      state = 0;
    }
  } while (state < 2);
  
  // todo: clean up
}


void cmd_analog_write()
{
  byte pin;
  byte val;

  pin = spi_transfer(0x00);
  val = spi_transfer(0x00);
  pinMode(pin, OUTPUT);
  analogWrite(pin, val);
}


void cmd_digital_read()
{
  byte pin;
  int val;
  
  pin = spi_transfer(0x00);
  pinMode(pin, INPUT);
  val = digitalRead(pin);
  if (val == HIGH) {
    spi_transfer(0x01);
  } else {
    spi_transfer(0x00);
  }
}


void cmd_digital_write()
{
  byte pin;
  byte val;
  
  pin = spi_transfer(0x00);
  val = spi_transfer(0x00);
  pinMode(pin, OUTPUT);
  if (val == 0x01) {
    digitalWrite(pin, HIGH);
  } else if (val == 0x00) {
    digitalWrite(pin, LOW);
  }
}


void cmd_fbus2_init()
{
  int i;
  
  Serial.begin(115200);
  for (i=0; i<128; i++)
    Serial.write((uint8_t)0x55);
  delay(10);
  
  do_irq();
  spi_transfer(0x00);
}


void cmd_firmware_ver()
{
  spi_transfer(VERSION);
}


void cmd_hw_reset()
{
    // try to rest via watchdog
    WDTCSR = _BV(WDE);
    // if the bootloader supports it, the device should
    // reset itself ~ 16ms later
}


void cmd_i2c_receive()
{
  byte addr;
  byte len;
  byte ret;
  
  if (!i2c_enabled) {
    // join the i2c bus as master
    Wire.begin();
    i2c_enabled = true;
  }
  addr = spi_transfer(0x00);
  len = spi_transfer(0x00);
  ret = Wire.requestFrom(addr, len);
  // wake up nds, return number of bytes read
  do_irq();
  spi_transfer(ret);
  // return expected number of bytes
  while (len != 0) {
    if (ret != 0) {
      spi_transfer(Wire.receive());
      ret--;
    } else {
      // return dummy byte
      spi_transfer(0x00);
    }
    len--;
  }
}


void cmd_i2c_send()
{
  byte len;
  byte ret;
  
  if (!i2c_enabled) {
    // join the i2c bus as master
    Wire.begin();
    i2c_enabled = true;
  }
  Wire.beginTransmission(spi_transfer(0x00));
  len = spi_transfer(0x00);
  while (len != 0) {
    Wire.send(spi_transfer(0x00));
    len--;
  }
  ret = Wire.endTransmission();
  // wake up nds, return result
  do_irq();
  spi_transfer(ret);
}


void cmd_reg_read_8()
{
  volatile byte *reg;
  
  reg = (volatile byte*)spi_transfer(0x00);
  spi_transfer(*reg);
}


void cmd_reg_write_8()
{
  volatile byte *reg;
  
  reg = (volatile byte*)spi_transfer(0x00);
  *reg = spi_transfer(0x00);
}


void cmd_set_bps()
{
  unsigned long bps;
  unsigned int bps_high, bps_low;
  unsigned long bps_test = 57600;
  
  // shifting does not work on arduino with > 16-bit values
  bps_high = spi_transfer(0x00)<<8;
  bps_high |= spi_transfer(0x00);
  bps_low = spi_transfer(0x00)<<8;
  bps_low |= spi_transfer(0x00);
  bps = bps_high*0x10000+bps_low;
  
  Serial.begin(bps);
}


void cmd_uart_block_write()
{
  byte out[32];
  byte len;
  byte i;

  // read in
  len = spi_transfer(0x00);
  if (32 < len)
    len = 32;
  for (i=0; i<len; i++) {
    out[i] = spi_transfer(0x00);
  }
  // output blocking
  for (i=0; i<len; i++) {
    Serial.write((uint8_t)out[i]);
  }
  // return number of bytes written
  do_irq();
  spi_transfer(len);
}


void cmd_uart_set_parity()
{
  byte par;

  par = spi_transfer(0x00);
  if (par == 'N' || par == 'n') {
    // no parity (default)
    UCSR0C &= ~_BV(5);
    UCSR0C &= ~_BV(4);
  } else if (par == 'E' || par == 'e') {
    // even parity
    UCSR0C |= _BV(5);
    UCSR0C &= ~_BV(4);
  } else if (par == 'O' || par == 'o') {
    // odd parity
    UCSR0C |= _BV(5);
    UCSR0C |= _BV(4);
  }
}


void loop()
{
  byte serial_in;
  byte spi_in;
  
  if (do_spi_next) {
    serial_in = spi_next;
    do_spi_next = false;
  } else if (Serial.available() > 0) {
    serial_in = Serial.read();
    // escape null-bytes and blackslashes and 0xff
    if (serial_in == 0x00) {
      serial_in = '\\';
      spi_next = 0x00;
      do_spi_next = true;
    } else if (serial_in == '\\') {
      spi_next = '\\';
      do_spi_next = true;
    } else if (serial_in == 0xff) {
      serial_in = '\\';
      spi_next = 0xff;
      do_spi_next = true;
    }
  } else {
    // send dummy byte
    serial_in = 0x00;
  }
  
  // do spi
  spi_in = spi_transfer(serial_in);
  
  if (got_esc) {
    got_esc = false;
    // handle escape characters
    if (spi_in == 'a') {
      // \a: analog read
      cmd_analog_read();
    } else if (spi_in == 'A') {
      // \A: analog write
      cmd_analog_write();
    } else if (spi_in == 'b') {
      // \b: set bps
      cmd_set_bps();
    } else if (spi_in == 'd') {
      // \d: digital read
      cmd_digital_read();
    } else if (spi_in == 'D') {
      // \D: digital write
      cmd_digital_write();
    } else if (spi_in == 'f') {
      // \f: start fast adc
      cmd_analog_read_fast();
      // (\F stops it)
    } else if (spi_in == 'i') {
      // \i: receive i2c data
      cmd_i2c_receive();
    } else if (spi_in == 'I') {
      // \I: send i2c data
      cmd_i2c_send();
    } else if (spi_in == 'n') {
      // \n: do nokia f-bus2 init
      cmd_fbus2_init();
    } else if (spi_in == 'p') {
      // \p: set uart parity
      cmd_uart_set_parity();
    } else if (spi_in == 'r') {
      // \r: read from register
      cmd_reg_read_8();
    } else if (spi_in == 'R') {
      // \R: write to register
      cmd_reg_write_8();
    } else if (spi_in == 'u') {
      // \u: blocking uart write
      cmd_uart_block_write();
    } else if (spi_in == 'v') {
      // \v: get firmware version
      cmd_firmware_ver();
    } else if (spi_in == 'x') {
      // \x: hardware reset
      cmd_hw_reset();
    } else {
      Serial.print(spi_in, BYTE);
    }
  } else if (spi_in == '\\') {
    got_esc = true;
  } else if (spi_in != 0x00) {
    Serial.print(spi_in, BYTE);
  }
}